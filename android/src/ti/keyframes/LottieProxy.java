/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.animation;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;
import android.app.Activity;
import android.view.LayoutInflater;
import android.content.res.Resources;
import android.view.View;
import com.airbnb.lottie.LottieAnimationView;
import com.airbnb.lottie.*;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.io.TiFileFactory;
import java.io.InputStream;
import java.io.IOException;
import android.content.res.Resources;
import org.appcelerator.titanium.TiApplication;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import org.json.JSONObject ;
import java.lang.Exception ;


@Kroll.proxy(creatableInModule=TiAnimationModule.class)
public class LottieProxy extends TiViewProxy
{
	// Standard Debugging variables
	private static final String LCAT = "LottieProxy";
	private static final boolean DBG = TiConfig.LOGD;
	private LottieAnimationView lottieView;
	private TiApplication appContext;
	Resources resources;
	String loadFile = "";
	boolean isReady = false;
	boolean isAutoStart = false;
	boolean isLoop = false;
	
	private class LottieView extends TiUIView
	{
		public LottieView(TiViewProxy proxy) {
			super(proxy);
			
			String packageName = proxy.getActivity().getPackageName();
            resources = proxy.getActivity().getResources();
			View videoWrapper;
			
			int resId_videoHolder = -1;
			int resId_video       = -1;
			int resId_lotti       = -1;

			resId_videoHolder = resources.getIdentifier("layout_lottie", "layout", packageName);
			resId_lotti       = resources.getIdentifier("animation_view", "id", packageName);
			
			LayoutInflater inflater     = LayoutInflater.from(getActivity());
			videoWrapper = inflater.inflate(resId_videoHolder, null);
			
			lottieView = (LottieAnimationView)videoWrapper.findViewById(resId_lotti);
			setNativeView(videoWrapper);
			appContext = TiApplication.getInstance();
			isReady = true;
			if (loadFile != ""){
				setFile(loadFile);
			}
		}

		@Override
		public void processProperties(KrollDict d)
		{
			super.processProperties(d);
		}
	}


	// Constructor
	public LottieProxy()
	{
		super();
	}
	
	private String getPathToApplicationAsset(String assetName)
	{
		// The url for an application asset can be created by resolving the specified
		// path with the proxy context. This locates a resource relative to the 
		// application resources folder
		
		String result = resolveUrl(null, assetName);
		return result;
	}

	@Override
	public TiUIView createView(Activity activity)
	{
		TiUIView view = new LottieView(this);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;
		return view;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options)
	{
		super.handleCreationDict(options);
		
		if (options.containsKey("file")) {
			if (isReady){
				setFile(options.getString("file"));
			} else {
				loadFile = options.getString("file");
			}
		}
		if (options.containsKey("loop")) {
			isLoop = options.getBoolean("loop");
		}
		if (options.containsKey("autoStart")) {
			isAutoStart = options.getBoolean("autoStart");
		}
	}

	@Kroll.method
    public void start() {
		boolean restart = lottieView.isAnimating();
		lottieView.cancelAnimation();
		lottieView.setProgress(0f);
		lottieView.playAnimation();
    }
	
	@Kroll.method
    public void play() {
		start();
    }

	@Kroll.method
    public void resume() {
		lottieView.playAnimation();
    }
	
	@Kroll.method
    public void pause() {
		lottieView.cancelAnimation();
    }
	
	@Kroll.method
    public void stop() {
		lottieView.cancelAnimation();
    }
	
	@Kroll.method
    public void seekToProgress(float pos) {
		lottieView.setProgress(pos);
    }
	
	@Kroll.method
    public void setFile(String f) {
		try {
			String url = getPathToApplicationAsset(f);
			TiBaseFile file = TiFileFactory.createTitaniumFile(new String[] { url }, false);      
			final InputStream stream = file.getInputStream();
			
			Thread thread = new Thread(new Runnable(){
			@Override
			public void run() {
					BufferedReader input = null;
					try {
						input = new BufferedReader(new InputStreamReader(stream));
						String line;
						StringBuffer content = new StringBuffer();
						char[] buffer = new char[1024];
						int num;
						while ((num = input.read(buffer)) > 0) {
							content.append(buffer, 0, num);
						}
						JSONObject jsonObject = new JSONObject(content.toString());
						LottieComposition.fromJson(resources, jsonObject, new LottieComposition.OnCompositionLoadedListener(){
							@Override
							public void onCompositionLoaded(LottieComposition composition) {
								lottieView.setComposition(composition);
								if (isLoop){
									lottieView.loop(true);
								}
								if (isAutoStart){
									lottieView.playAnimation();
								}
							}
						});
					} catch (Exception e) {
						//
					}
				}
			});
			thread.start();  
			
		} catch (IOException e){
			Log.i(LCAT, "error " + e);
		}
    }
	
	@Kroll.method
    public void initialize() {
        
    }
}
